public class _15 extends Thread {
    public static void main(String[] args) throws InterruptedException {
        Thread t = new This_Class_Makes_Threads_It_Extends_The_Java_Thread_Class();
        t.setDaemon(true);
        println("Running a daemon thread with `ID`: `" + t.getId() + '`' + '.');

        println("\nThe following message is being generated by another `Thread`!");
        println("\"I will now divide `5` by `0`, BUT both are integers!\"");
        println("\"...and the solution is:\"\n\n");

        t.start();
        t.join();
        print("\n\n...**AND HE NEVER CAME BACK.**");
    }

    public static void println(String st) throws InterruptedException {
        print(st);
        System.out.println();
        Thread.sleep(200);
    }

    public static void print(String st) throws InterruptedException {

        // Could use this, but it is unoptimized!:
        /*
         * char[] ch = st.toCharArray();
         * 
         * for (char c : ch) {
         * 
         * System.out.print(c);
         * 
         * Thread.sleep(10); }
         */

        for (int i = 0; i < st.length(); i++) {
            char c = st.charAt(i);
            System.out.print(c);

            if (Character.isUpperCase(c))
                Thread.sleep(80);

            switch (c) {
                case ',':
                    Thread.sleep(350);
                    break;
                case '.':
                    Thread.sleep(150);
                    break;
                case '!':
                    Thread.sleep(550);
                    break;
                case '-':
                    break;
                default:
                    Thread.sleep(20);
                    break;
            }
        }

    }

}

class This_Class_Makes_Threads_It_Extends_The_Java_Thread_Class extends Thread {
    @Override
    public void run() {
        System.out.println(5 / 0);
    }

}